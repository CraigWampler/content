import json
import sys

import demistomock as demisto  # noqa: F401
import requests
from CommonServerPython import *  # noqa: F401

# -----------------gather params----------------------------
params = demisto.params()
bridgeIP = params.get('bridgeIP')
username = params.get('username')
port = params.get('port')

# -----------------check to make sure IP is valid-----------
a = bridgeIP.split('.')
if len(a) != 4:
    return_error('IP address given is not valid, please try again.')
for x in a:
    if not x.isdigit():
        return_error('IP address given is not valid, please try again.')
    i = int(x)
    if i < 0 or i > 255:
        return_error('IP address given is not valid, please try again.')

# -----------------globals----------------------------------
url1 = "http://"
url2 = ":" + port + "/api/"
slash = "/"
baseURL = url1 + str(bridgeIP) + url2 + username + slash
command = demisto.command()
args = demisto.args()


""" ---------- Functions call------------"""


def get_all_lights_command():
    page = "lights"
    URL = baseURL + page
    response = requests.get(URL)

    if not response.ok:
        error = "Error in request {} - {}".format(response.status_code, response.text)
        raise Exception(text)
    data = response.json()
    return data


def get_new_lights_command():
    page = "lights/new"
    URL = baseURL + page
    response = requests.get(URL)
    if not response.ok:
        error = "Error in request {} - {}".format(response.status_code, response.text)
        raise Exception(text)
        data = response.json()
        demisto.results(data)
    return data


def search_new_lights_command():
    page = "lights"
    URL = baseURL + page
    response = requests.post(URL)
    if not response.ok:
        error = "Error in request {} - {}".format(response.status_code, response.text)
        raise Exception(text)
    data = response.json()
    return data


def get_light_state_command():
    lightID = args.get('id')
    page = 'lights/' + lightID
    URL = baseURL + page
    response = requests.get(URL)
    if not response.ok:
        error = "Error in request {} - {}".format(response.status_code, response.text)
        raise Exception(text)
    data = response.json()
    return data


def set_light_state_command():
    on = args.get('on')
    # demisto.results(type(on))
    if on == "true" or on == "True":
        on = True
    elif on == "false" or on == "False":
        on = False
    hue = int(args.get('hue'))
    bri = int(args.get('bri'))
    sat = int(args.get('sat'))
    lightID = args.get('id')
    header = {
        'Content-Type': 'application/json'
    }
    payload = {"hue": hue, "on": on, "sat": sat, "bri": bri}
    page = 'lights/' + lightID + '/state'
    URL = baseURL + page

    response = requests.request("PUT", URL, data=json.dumps(payload), headers=header)
    # demisto.results(response.url)

    if not response.ok:
        error = "Error in request {} - {}".format(response.status_code, response.text)
        raise Exception(text)
    data = response.json()
    return data


def get_all_groups_command():
    page = 'groups'
    URL = baseURL + page
    response = requests.get(URL)
    if not response.ok:
        error = "Error in request {} - {}".format(response.status_code, response.text)
        raise Exception(text)
    data = response.json()
    return data


"""
def create_group_command():
    lights = args.get('lights')
    name = args.get('name')
    params = {"lights": lights, "name": name}
    page = "groups"
    URL = baseURL + page
    response = requests.post(URL, params)
    if not response.ok:
        error = "Error in request {} - {}".format(response.status_code, response.text)
        raise Exception(text)
    data = response.json()
    return data
    """


def get_group_state_command():
    groupID = args.get('id')
    page = 'groups/'
    URL = baseURL + page + groupID
    response = requests.get(URL)
    if not response.ok:
        error = "Error in request {} - {}".format(response.status_code, response.text)
        raise Exception(text)
    data = response.json()
    return data


def set_group_state_command():
    groupID = args.get('id')
    on = args.get('on')
    if on == "true" or on == "True":
        on = True
    elif on == "false" or on == "False":
        on = False
    hue = int(args.get('hue'))
    bri = int(args.get('bri'))
    sat = int(args.get('sat'))
    lightID = args.get('id')
    header = {
        'Content-Type': 'application/json'
    }
    payload = {"hue": hue, "on": on, "sat": sat, "bri": bri}

    page = 'groups/'
    URL = baseURL + page + groupID + "/" + "action"
    response = requests.request("PUT", URL, data=json.dumps(payload), headers=header)
    if not response.ok:
        error = "Error in request {} - {}".format(response.status_code, response.text)
        raise Exception(text)
    data = response.json()
    return data


"""--------------------Execution Code------------------------"""


def main():
    LOG('command is %s' % (demisto.command(),))
    try:
        if command == 'test-module':
            response = requests.get(baseURL)
            if response is not None:
                demisto.results("ok")
            else:
                demisto.results('Test Failed: {}'.format(res.text))
        elif demisto.command() == 'get-all-lights':
            demisto.results(get_all_lights_command())
        elif demisto.command() == 'get-new-lights':
            demisto.results(get_new_lights_command())
        elif demisto.command() == 'search-new-lights':
            demisto.results(search_new_lights_command())
        elif demisto.command() == 'get-light-state':
            demisto.results(get_light_state_command())
        elif demisto.command() == 'set-light-state':
            demisto.results(set_light_state_command())
        elif demisto.command() == 'get-all-groups':
            demisto.results(get_all_groups_command())
        elif demisto.command() == 'create-group':
            demisto.results(create_group_command())
        elif demisto.command() == 'get-group-state':
            demisto.results(get_group_state_command())
        elif demisto.command() == 'set-group-state':
            demisto.results(set_group_state_command())

    except Exception as e:
        return_error(str(e))


if __name__ in ['__main__', '__builtin__', 'builtins']:
    main()
