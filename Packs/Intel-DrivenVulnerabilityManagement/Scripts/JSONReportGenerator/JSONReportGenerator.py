import collections

import demistomock as demisto  # noqa: F401
from CommonServerPython import *  # noqa: F401


def flatten(d, parent_key='', sep='_'):
    items = []
    for k, v in d.items():
        new_key = parent_key + sep + k if parent_key else k
        if isinstance(v, collections.MutableMapping):
            items.extend(flatten(v, new_key, sep=sep).items())
        else:
            items.append((new_key, v))
    return dict(items)


data = demisto.args()['json'] if 'json' in demisto.args() else False
if not data:
    data = demisto.context()['ex']['TenableSC']['ScanResults'][0]

# md = "# Table\n\n"
md = ""

# TODO check for array type, dict, string
for k, v in flatten(data).items():
    if isinstance(v, dict):
        md += f"**{k}**\n"
        for k_tmp, v_tmp in v.items():
            if isinstance(v_tmp, list):
                md += "\n".join(str(v_tmp))
            else:
                md += f"\t**{str(k_tmp)}**: {str(v_tmp)}\n"
    elif isinstance(v, list):
        k_tmp = k.replace(",", "\n")
        md += f"{k_tmp}\n"
        for i in v:
            if isinstance(i, list):

                md += "\n".join(str(v))

            elif isinstance(i, dict):
                flat = flatten(i)
                for x, z in flat.items():
                    md += f"**{x}**:{z}\n"
            else:
                md += f"{str(i)}\n"
        """
        for i in v:

            if isinstance(i, list):
                md += "\n".join(str(i))
            elif isinstance(i,dict):

                flat = flatten(i)
                for m, f in flat.items():
                    if isinstance(f, list):
                        md += "\n".join(str(f))
                    else:
                        md += f"\t**{str(m)}**: {str(f)}\n"
                #md += str(flatten(i))
            else:
                md += str(i)
        """
        #md += f"**{k}**\n\n\t{t}"
    else:
        md += f"**{str(k)}**: {str(v)}\n"

entry = {
    'Type': 1,
    'Contents': md,
    'ContentsFormat': 'markdown',
    'HumanReadable': md,
    'ReadableContentsFormat': 'markdown'
}


demisto.results(entry)
